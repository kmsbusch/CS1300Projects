{"filter":false,"title":"utility.h","tooltip":"/Project2/utility.h","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["// CS1300 Spring 2019","// Author: Kevin Busch","// Recitation: 301 â€“ Thanika Reddy","// Cloud9 Workspace Editor Link: https://csci1300-kevinbusch.c9users.io","// Project 2 - ","#include <iostream>","#include <fstream>","#include <string>","using namespace std;","","/*","Algorithm: ","1.","Input parameters: ","Output (prints to screen): ","Returns: none","*/","",""],"id":1}],[{"start":{"row":18,"column":0},"end":{"row":39,"column":1},"action":"insert","lines":["int split(string str, char c, string words[], int arrayLength)","{","    if (str.length() == 0) {","        return 0;","    }","    string word = \"\";","    int j = 0;","    str = str + c;","    for (int i = 0; i < str.length(); i++)","    {","        if (str[i] == c) ","        {","        \tif (word.length() == 0) continue;","            words[j] = word;","            j++;","            word = \"\";","        } else {","            word = word + str[i];","        }","    }","    return j;","}"],"id":2}],[{"start":{"row":18,"column":0},"end":{"row":39,"column":1},"action":"remove","lines":["int split(string str, char c, string words[], int arrayLength)","{","    if (str.length() == 0) {","        return 0;","    }","    string word = \"\";","    int j = 0;","    str = str + c;","    for (int i = 0; i < str.length(); i++)","    {","        if (str[i] == c) ","        {","        \tif (word.length() == 0) continue;","            words[j] = word;","            j++;","            word = \"\";","        } else {","            word = word + str[i];","        }","    }","    return j;","}"],"id":3},{"start":{"row":18,"column":0},"end":{"row":91,"column":1},"action":"insert","lines":["int split(string str, char c, string words[], int arrayLength)","{","    if (str.length() == 0) {","        return 0;","    }","    string word = \"\";","    int j = 0;","    str = str + c;","    for (int i = 0; i < str.length(); i++)","    {","        if (str[i] == c) ","        {","        \tif (word.length() == 0) continue;","            words[j] = word;","            j++;","            word = \"\";","        } else {","            word = word + str[i];","        }","    }","    return j;","}","","string makeLower(string nameIn) //was string originally but changed to void bc it isn't returning nameIn string anymore but storing it instead","{","    // User user;","    // user = User();","    int length = nameIn.length(); //stores length of input string so it can limit for loop","    for (int i = 0; i < length; i++) //loop through string","    {","        int m = nameIn[i]; //assign character of string to variable (ascii value of letter)","        nameIn[i] = tolower(m); // tolower func makes m lowercase and then character of nameIn string is assigned to that value","    }","    return nameIn; // return the new lowercase string","    // user.setUsername(nameIn); //new lowercase username is stored in user object","}","","","//func searches array to see if ","int searchUserFunc(User users[], int storageMax, string target) //string arr[] is array to be searched, storageMax is arr size, string target is the string to be found","{","    string temp = makeLower(users[0].getUsername()); //assigns first indexed string in arr[] variable string temp (after using makeLower func on it)","    string test = makeLower(target); //assigns lowercase target string to variable string test","    int h = 0; //h keeps count of times through loop","    while(temp != test && h < storageMax) // while the strings don't match (meaning target hasn't been found), and still within arr bounds","    {   ","        h++; //increment here because before this, arr index was set to zero so that while case would run, and it would default to look for first term","        if(h<storageMax) // if still in array bounds","            temp = makeLower(users[h].getUsername()); //checks rest of array by reassigning temps value, and then it'll be checked by while statement","    }","    if (h == storageMax) //if at end of array and target not found, return -3","    {","        return -3;","    }","    return h; //otherwise, return index where target was found","}","","int searchBookFunc(Book books[], int storageMax, string target) //string arr[] is array to be searched, storageMax is arr size, string target is the string to be found","{","    string temp = makeLower(books[0].getTitle()); //assigns first indexed string in arr[] variable string temp (after using makeLower func on it)","    string test = makeLower(target); //assigns lowercase target string to variable string test","    int h = 0; //h keeps count of times through loop","    while(temp != test && h < storageMax) // while the strings don't match (meaning target hasn't been found), and still within arr bounds","    {   ","        h++; ////increment here because before this, arr index was set to zero so that while case would run, and it would default to look for first term","        if(h<storageMax) // if still in array bounds","            temp = makeLower(books[h].getTitle()); //checks rest of array by reassigning temps value, and then it'll be checked by while statement","    }","    if (h == storageMax) //if at end of array and target not found, return -3","    {","        return -3;","    }","    return h; //otherwise, return index where target was found","}"]}],[{"start":{"row":39,"column":1},"end":{"row":91,"column":1},"action":"remove","lines":["","","string makeLower(string nameIn) //was string originally but changed to void bc it isn't returning nameIn string anymore but storing it instead","{","    // User user;","    // user = User();","    int length = nameIn.length(); //stores length of input string so it can limit for loop","    for (int i = 0; i < length; i++) //loop through string","    {","        int m = nameIn[i]; //assign character of string to variable (ascii value of letter)","        nameIn[i] = tolower(m); // tolower func makes m lowercase and then character of nameIn string is assigned to that value","    }","    return nameIn; // return the new lowercase string","    // user.setUsername(nameIn); //new lowercase username is stored in user object","}","","","//func searches array to see if ","int searchUserFunc(User users[], int storageMax, string target) //string arr[] is array to be searched, storageMax is arr size, string target is the string to be found","{","    string temp = makeLower(users[0].getUsername()); //assigns first indexed string in arr[] variable string temp (after using makeLower func on it)","    string test = makeLower(target); //assigns lowercase target string to variable string test","    int h = 0; //h keeps count of times through loop","    while(temp != test && h < storageMax) // while the strings don't match (meaning target hasn't been found), and still within arr bounds","    {   ","        h++; //increment here because before this, arr index was set to zero so that while case would run, and it would default to look for first term","        if(h<storageMax) // if still in array bounds","            temp = makeLower(users[h].getUsername()); //checks rest of array by reassigning temps value, and then it'll be checked by while statement","    }","    if (h == storageMax) //if at end of array and target not found, return -3","    {","        return -3;","    }","    return h; //otherwise, return index where target was found","}","","int searchBookFunc(Book books[], int storageMax, string target) //string arr[] is array to be searched, storageMax is arr size, string target is the string to be found","{","    string temp = makeLower(books[0].getTitle()); //assigns first indexed string in arr[] variable string temp (after using makeLower func on it)","    string test = makeLower(target); //assigns lowercase target string to variable string test","    int h = 0; //h keeps count of times through loop","    while(temp != test && h < storageMax) // while the strings don't match (meaning target hasn't been found), and still within arr bounds","    {   ","        h++; ////increment here because before this, arr index was set to zero so that while case would run, and it would default to look for first term","        if(h<storageMax) // if still in array bounds","            temp = makeLower(books[h].getTitle()); //checks rest of array by reassigning temps value, and then it'll be checked by while statement","    }","    if (h == storageMax) //if at end of array and target not found, return -3","    {","        return -3;","    }","    return h; //otherwise, return index where target was found","}"],"id":4}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":39,"column":1},"end":{"row":39,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1552881714355,"hash":"c5c038bb1e3c6e922df77bf76eb4bee5f7a2da8f"}