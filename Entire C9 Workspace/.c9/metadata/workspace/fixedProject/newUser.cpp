{"filter":false,"title":"newUser.cpp","tooltip":"/fixedProject/newUser.cpp","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":5,"column":0},"end":{"row":90,"column":1},"action":"remove","lines":["#include <iostream>","#include <fstream>","#include <string>","#include \"User.h\"","using namespace std;","","/*","Algorithm: ","1.","Input parameters: ","Output (prints to screen): ","Returns: none","*/","","User::User()","{","    //cout << \"default\" << endl;","    username = \"\";","    numRatings = 0;","    size = 50;","    for (int i = 0; i < 50; i++)","    {","        ratings[i] = 0;","    }","}","User::User(string inputName, int userRatings[], int ratingsCount)","{","    //User();","    username = \"\";","    numRatings = 0;","    size = 50;","    username = inputName;","    for (int i = 0; i < 50; i++)","    {","        ratings[i] = userRatings[i];","    }","    numRatings = ratingsCount;","    for (int i = ratingsCount; i < size; i++) //set the array after what has a value equal to zero. ","    {","        ratings[i] = 0;","    }","}","void User::setUsername(string inputName)","{","    username = inputName;","}","string User::getUsername()","{","    return username;","}","bool User::setRatingAt(int index, int value)","{","    ","    if (index < 50 && value >= 0 && value <= 5) //error might show up here from syntax","    {","        ratings[index] = value;","        return true;","    }","    else ","    {","        return false;","    }","}","int User::getRatingAt(int index)","{","    if (index < 50)","    {","        return ratings[index];","    }","    else ","    {","        return -1;","    }","}","void User::setNumRatings(int ratingCount)","{","    numRatings = ratingCount;","}","int User::getNumRatings()","{","    return numRatings;","}","int User::getSize()","{","    return size;","}"],"id":2},{"start":{"row":5,"column":0},"end":{"row":115,"column":1},"action":"insert","lines":["#include <iostream>","#include <fstream>","#include <string>","#include \"user.h\"","","","using namespace std;","","/*","Algorithm: ","1.","Input parameters: ","Output (prints to screen): ","Returns: none","*/","","","// class User","// {","","// public:","//     User(); //default constructor","//     User(string, int[], int); //parameterized constructor","//     void setUsername(string); //setter for username string","//     string getUsername(); //getter for username","//     bool setRatingAt(int, int); //setter for rating at specified indices","//     int getRatingAt(int); //getter for rating at index","//     void setNumRatings(int); //setter for numratings","//     int getNumRatings(); //getter for numratings","//     int getSize();","","// private:","//     string username;","//     int ratings[50];","//     int numRatings;","//     int size; //n2s does this need to be initializedabove ratings and then go into the brackets for ratings?","// };","","","User::User()","{","    //cout << \"default\" << endl;","    username = \"\";","    numRatings = 0;","    size = 50;","    for (int i = 0; i < 50; i++)","    {","        ratings[i] = 0;","    }","}","User::User(string inputName, int userRatings[], int ratingsCount)","{","    //User();","    username = \"\";","    numRatings = 0;","    size = 50;","    username = inputName;","    for (int i = 0; i < 50; i++)","    {","        ratings[i] = userRatings[i];","    }","    numRatings = ratingsCount;","    for (int i = ratingsCount; i < size; i++) //set the array after what has a value equal to zero. ","    {","        ratings[i] = 0;","    }","}","void User::setUsername(string inputName)","{","    username = inputName;","}","string User::getUsername()","{","    return username;","}","bool User::setRatingAt(int index, int value)","{","    ","    if (index < 50 && value >= 0 && value <= 5) //error might show up here from syntax","    {","        ratings[index] = value;","        return true;","    }","    else ","    {","        return false;","    }","}","int User::getRatingAt(int index)","{","    if (index < 50)","    {","        return ratings[index];","    }","    else ","    {","        return -1;","    }","}","void User::setNumRatings(int ratingCount)","{","    numRatings = ratingCount;","}","int User::getNumRatings()","{","    return numRatings;","}","int User::getSize()","{","    return size;","}"]}],[{"start":{"row":8,"column":10},"end":{"row":8,"column":11},"action":"remove","lines":["u"],"id":3}],[{"start":{"row":8,"column":10},"end":{"row":8,"column":11},"action":"insert","lines":["U"],"id":4}],[{"start":{"row":8,"column":10},"end":{"row":8,"column":11},"action":"insert","lines":["n"],"id":5},{"start":{"row":8,"column":11},"end":{"row":8,"column":12},"action":"insert","lines":["e"]},{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["w"]}]]},"ace":{"folds":[],"scrolltop":1017,"scrollleft":0,"selection":{"start":{"row":8,"column":13},"end":{"row":8,"column":13},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":9,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1553283191818,"hash":"ce840b95866ed1f7c2e76f9713d3e542e5d64187"}